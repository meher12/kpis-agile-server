version: '3.8'
services:

#Back-end spring-boot Application
  kpis-backend:
      image: 'kpis-agiles-backend:latest'
      container_name: kpis-agile-server
      ports:
         - "8081:8081"
      build:
         context: .
      restart: on-failure
      depends_on:
         - db
      environment:
            #compose-postgres name db user pass
            - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/compose-postgres
            - SPRING_DATASOURCE_USERNAME=postgres
            - SPRING_DATASOURCE_PASSWORD=pass
            - SPRING_JPA_HIBERNATE_DDL_AUTO=update
            - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
      networks: # Networks to join (Services on the same network can communicate with each other using their name)
        - backend
        - frontend

#Postgres db
  db:
     #image: 'postgres-alpine'
     image: 'postgres:13.1-alpine'
     container_name: db-kpis-agile
     restart: always
     #build:
         #context: ./db
         #dockerfile: Dockerfile

     #command: docker cp ./db/data/datasqlkpiagile db-kpis-agile:/datasqlkpiagile
     volumes:
      -  pgkpis-agile:/var/lib/postgresql/data
      - ./db/dumps.sql:/docker-entrypoint-initdb.d/0_dumps.sql
      
     environment:
         - POSTGRES_USER=postgres
         - POSTGRES_PASSWORD=pass
     networks:
       - backend    

 #Fron-end Angular Application
  kpis-ui:
    image: 'kpis-agiles-frontend:latest'
    container_name: kpis-agile-ui
    build:
         context: ../CICD-KPIsAgiles-Client
         #for production mode
         #context: ../kpis-agile-client

    ports:
      - 4200:80
    depends_on:
         - kpis-backend
    networks:
      - frontend

volumes:
  pgkpis-agile:  
  
# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: